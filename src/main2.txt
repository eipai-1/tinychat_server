#include <iostream>
#include <mysql/mysql.h>  // MySQL C API 的核心头文件
#include <cstdlib>        // 用于 exit()

// 用于在发生错误时打印信息并退出的辅助函数
void finish_with_error(MYSQL *con) {
    // mysql_error() 返回上一个MySQL操作的错误信息
    std::cerr << mysql_error(con) << std::endl;
    if (con) {
        mysql_close(con);  // 如果连接句柄有效，就关闭它
    }
    exit(1);  // 退出程序
}

int main() {
    // --- 1. 初始化连接句柄 ---
    // 这是所有操作的第一步，它分配并初始化一个MYSQL对象
    MYSQL *con = mysql_init(NULL);

    if (con == NULL) {
        // 如果连初始化都失败了（比如内存不足），就直接退出
        fprintf(stderr, "mysql_init() failed\n");
        exit(1);
    }

    std::cout << "MySQL client version: " << mysql_get_client_info() << std::endl;

    // --- 2. 建立真实连接 ---
    // 参数：连接句柄, 主机地址, 用户名, 密码, 数据库名, 端口, unix_socket, client_flag
    // 如果主机是 "localhost"，它会优先尝试使用 Unix socket 连接，速度更快
    // 端口传 0 表示使用默认端口 (3306)
    // 最后两个参数通常设为 NULL 和 0
    if (mysql_real_connect(con, "127.0.0.1", "root", "123RootP", "tinychat", 3306, NULL, 0) ==
        NULL) {
        // 连接失败
        finish_with_error(con);
    }

    std::cout << "Connection successful!" << std::endl;

    // --- 3. 执行 SQL 查询 ---
    // mysql_query() 用于执行一条SQL语句
    // 如果成功，返回0；如果失败，返回非0
    const char *query = "SELECT username FROM users LIMIT 5";
    if (mysql_query(con, query)) {
        // 查询执行失败
        finish_with_error(con);
    }
    std::cout << "Query executed: \"" << query << "\"" << std::endl;

    // --- 4. 获取并处理结果 ---
    // mysql_store_result() 将查询的全部结果从服务器一次性取回到客户端
    // 它返回一个指向结果集结构的指针 (MYSQL_RES*)
    MYSQL_RES *result = mysql_store_result(con);

    if (result == NULL) {
        // 获取结果失败（可能是没有结果集的查询，如UPDATE，也可能是真出错了）
        finish_with_error(con);
    }

    // 获取结果集中的列数
    int num_fields = mysql_num_fields(result);

    // MYSQL_ROW 是一个行数据结构（本质上是 char**）
    MYSQL_ROW row;

    std::cout << "\n--- Query Results ---" << std::endl;
    // mysql_fetch_row() 从结果集中获取下一行
    // 当没有更多行时，返回 NULL
    while ((row = mysql_fetch_row(result))) {
        // 遍历当前行的每一列
        for (int i = 0; i < num_fields; i++) {
            // row[i] 是一个指向C风格字符串的指针
            // 如果字段值为 NULL，row[i] 也是 NULL，需要检查
            std::cout << (row[i] ? row[i] : "NULL") << "\t";
        }
        std::cout << std::endl;
    }
    std::cout << "---------------------\n" << std::endl;

    // --- 5. 释放资源 ---
    // 结果集使用完毕后，必须手动释放，否则会导致内存泄漏！
    mysql_free_result(result);

    // --- 6. 关闭连接 ---
    // 关闭与服务器的连接，并释放连接句柄占用的资源
    mysql_close(con);

    std::cout << "Connection closed." << std::endl;

    return 0;
}